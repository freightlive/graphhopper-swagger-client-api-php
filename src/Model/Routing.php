<?php
/**
 * Routing
 *
 * PHP version 5
 *
 * @category Class
 * @package  GraphHopper
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * GraphHopper Directions API
 *
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace GraphHopper\Model;

use \ArrayAccess;
use \GraphHopper\ObjectSerializer;

/**
 * Routing Class Doc Comment
 *
 * @category Class
 * @package     GraphHopper
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Routing implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Routing';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'calc_points' => 'bool',
        'consider_traffic' => 'bool',
        'network_data_provider' => 'string',
        'fail_fast' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'calc_points' => null,
        'consider_traffic' => null,
        'network_data_provider' => null,
        'fail_fast' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'calc_points' => 'calc_points',
        'consider_traffic' => 'consider_traffic',
        'network_data_provider' => 'network_data_provider',
        'fail_fast' => 'fail_fast'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'calc_points' => 'setCalcPoints',
        'consider_traffic' => 'setConsiderTraffic',
        'network_data_provider' => 'setNetworkDataProvider',
        'fail_fast' => 'setFailFast'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'calc_points' => 'getCalcPoints',
        'consider_traffic' => 'getConsiderTraffic',
        'network_data_provider' => 'getNetworkDataProvider',
        'fail_fast' => 'getFailFast'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const NETWORK_DATA_PROVIDER_OPENSTREETMAP = 'openstreetmap';
    const NETWORK_DATA_PROVIDER_TOMTOM = 'tomtom';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNetworkDataProviderAllowableValues()
    {
        return [
            self::NETWORK_DATA_PROVIDER_OPENSTREETMAP,
            self::NETWORK_DATA_PROVIDER_TOMTOM,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['calc_points'] = isset($data['calc_points']) ? $data['calc_points'] : null;
        $this->container['consider_traffic'] = isset($data['consider_traffic']) ? $data['consider_traffic'] : null;
        $this->container['network_data_provider'] = isset($data['network_data_provider']) ? $data['network_data_provider'] : null;
        $this->container['fail_fast'] = isset($data['fail_fast']) ? $data['fail_fast'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getNetworkDataProviderAllowableValues();
        if (!in_array($this->container['network_data_provider'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'network_data_provider', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getNetworkDataProviderAllowableValues();
        if (!in_array($this->container['network_data_provider'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets calc_points
     *
     * @return bool
     */
    public function getCalcPoints()
    {
        return $this->container['calc_points'];
    }

    /**
     * Sets calc_points
     *
     * @param bool $calc_points indicates whether solution should come with route geometries
     *
     * @return $this
     */
    public function setCalcPoints($calc_points)
    {
        $this->container['calc_points'] = $calc_points;

        return $this;
    }

    /**
     * Gets consider_traffic
     *
     * @return bool
     */
    public function getConsiderTraffic()
    {
        return $this->container['consider_traffic'];
    }

    /**
     * Sets consider_traffic
     *
     * @param bool $consider_traffic indicates whether historical traffic information should be considered
     *
     * @return $this
     */
    public function setConsiderTraffic($consider_traffic)
    {
        $this->container['consider_traffic'] = $consider_traffic;

        return $this;
    }

    /**
     * Gets network_data_provider
     *
     * @return string
     */
    public function getNetworkDataProvider()
    {
        return $this->container['network_data_provider'];
    }

    /**
     * Sets network_data_provider
     *
     * @param string $network_data_provider specifies the data provider
     *
     * @return $this
     */
    public function setNetworkDataProvider($network_data_provider)
    {
        $allowedValues = $this->getNetworkDataProviderAllowableValues();
        if (!is_null($network_data_provider) && !in_array($network_data_provider, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'network_data_provider', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['network_data_provider'] = $network_data_provider;

        return $this;
    }

    /**
     * Gets fail_fast
     *
     * @return bool
     */
    public function getFailFast()
    {
        return $this->container['fail_fast'];
    }

    /**
     * Sets fail_fast
     *
     * @param bool $fail_fast indicates whether matrix calculation should fail fast when points cannot be connected
     *
     * @return $this
     */
    public function setFailFast($fail_fast)
    {
        $this->container['fail_fast'] = $fail_fast;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

